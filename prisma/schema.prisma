// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String   @unique
  fullName    String
  role        UserRole
  institution String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdCases           Case[]       @relation("CreatedCases")
  legalReviewedCases     Case[]       @relation("LegalReviewedCases")
  finalReviewedCases     Case[]       @relation("FinalReviewedCases")
  institutionResponses   Case[]       @relation("InstitutionResponses")
  uploadedFiles          CaseFile[]
  caseActions            CaseHistory[]
  assignedTasks          Task[]       @relation("AssignedTasks")
  createdTasks           Task[]       @relation("CreatedTasks")
  taskComments           TaskComment[]
  conversations          ConversationParticipant[]
  sentMessages           Message[]
  readMessages           MessageRead[]
  sessions               Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model Case {
  id                      Int        @id @default(autoincrement())
  caseNumber              String     @unique
  title                   String
  description             String
  platform                Platform
  priority                Priority
  status                  CaseStatus @default(IDP_FORM)
  tags                    String     @default("[]") // JSON stored as string
  geographicScope         GeographicScope
  sourceType              SourceType
  sourceUrl               String?
  
  // Additional news fields
  newsHeadline            String?
  newspaperAuthor         String?
  newsSummary             String?
  ministryInfo            String?
  relatedMinistry         String?
  submittedTo             String?
  submittingUnit          String?
  preparedBy              String?
  disinformationType      String?
  expertEvaluation        String?
  legalEvaluation         String?
  recommendationDMM       String?
  recommendationDMK       String?
  
  // IDP Form fields
  idpAssessment           String?
  idpNotes                String?
  
  // Legal Review fields
  legalAssessment         String?
  legalNotes              String?
  legalApproved           Boolean?
  legalReviewerId         Int?
  legalReviewDate         DateTime?
  
  // Final Control fields
  finalNotes              String?
  finalApproval           Boolean?
  finalReviewerId         Int?
  finalReviewDate         DateTime?
  
  // Report fields
  internalReport          String?
  externalReport          String?
  targetMinistry          String?
  reportGeneratedDate     DateTime?
  
  // Institution Response fields
  institutionResponse     String?
  institutionResponderId  Int?
  institutionResponseDate DateTime?
  correctiveInfo          String?
  
  createdById             Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  creator               User         @relation("CreatedCases", fields: [createdById], references: [id])
  legalReviewer         User?        @relation("LegalReviewedCases", fields: [legalReviewerId], references: [id])
  finalReviewer         User?        @relation("FinalReviewedCases", fields: [finalReviewerId], references: [id])
  institutionResponder  User?        @relation("InstitutionResponses", fields: [institutionResponderId], references: [id])
  files                 CaseFile[]
  history               CaseHistory[]
  tasks                 Task[]
}

model CaseFile {
  id          Int      @id @default(autoincrement())
  caseId      Int
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  uploadedById Int
  uploadedAt  DateTime @default(now())

  // Relations
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploader    User     @relation(fields: [uploadedById], references: [id])
}

model CaseHistory {
  id        Int        @id @default(autoincrement())
  caseId    Int
  userId    Int
  action    String
  oldStatus CaseStatus
  newStatus CaseStatus
  notes     String?
  createdAt DateTime   @default(now())

  // Relations
  case      Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])
}

model Task {
  id              Int        @id @default(autoincrement())
  title           String
  description     String
  priority        Priority   @default(MEDIUM)
  status          TaskStatus @default(PENDING)
  assignedToId    Int
  assignedById    Int
  caseId          Int?
  dueDate         DateTime?
  completedAt     DateTime?
  feedback        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  assignedTo      User       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedBy      User       @relation("CreatedTasks", fields: [assignedById], references: [id])
  case            Case?      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  comments        TaskComment[]

  @@index([assignedToId])
  @@index([assignedById])
  @@index([caseId])
}

model TaskComment {
  id          Int      @id @default(autoincrement())
  taskId      Int
  userId      Int
  comment     String
  createdAt   DateTime @default(now())

  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Conversation {
  id              Int      @id @default(autoincrement())
  title           String?
  isGroup         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastMessageAt   DateTime @default(now())
  lastMessageText String?
  
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             Int      @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  isActive       Boolean  @default(true)
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  
  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             Int      @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  isEdited       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id])
  readBy       MessageRead[]
  
  @@index([conversationId])
  @@index([senderId])
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())
  
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  
  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
}

// Enums
enum UserRole {
  ADMIN @map("admin")
  IDP_PERSONNEL @map("idp_personnel")
  LEGAL_PERSONNEL @map("legal_personnel")
  INSTITUTION_USER @map("institution_user")
}

enum CaseStatus {
  IDP_FORM @map("idp_form")
  HUKUK_INCELEMESI @map("hukuk_incelemesi")
  SON_KONTROL @map("son_kontrol")
  RAPOR_URETIMI @map("rapor_uretimi")
  KURUM_BEKLENIYOR @map("kurum_bekleniyor")
  TAMAMLANDI @map("tamamlandi")
}

enum Priority {
  LOW @map("low")
  MEDIUM @map("medium")
  HIGH @map("high")
  CRITICAL @map("critical")
}

enum Platform {
  TWITTER @map("twitter")
  FACEBOOK @map("facebook")
  INSTAGRAM @map("instagram")
  YOUTUBE @map("youtube")
  WHATSAPP @map("whatsapp")
  TELEGRAM @map("telegram")
  TIKTOK @map("tiktok")
  OTHER @map("other")
}

enum GeographicScope {
  LOCAL @map("local")
  REGIONAL @map("regional")
  NATIONAL @map("national")
  INTERNATIONAL @map("international")
}

enum SourceType {
  SOCIAL_MEDIA @map("social_media")
  NEWS_SITE @map("news_site")
  BLOG @map("blog")
  FORUM @map("forum")
  MESSAGING_APP @map("messaging_app")
  OTHER @map("other")
}

enum TaskStatus {
  PENDING @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED @map("completed")
  CANCELLED @map("cancelled")
}